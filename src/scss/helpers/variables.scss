// Контрольные точки;
$breakpointsPhone: 400px;
$breakpointsPhoneWide: 480px;
$breakpointsPhablet: 540px;
$breakpointsTabletSmall: 640px;
$breakpointsTablet: 768px;
$breakpointsTabletWide: 992px;
$breakpointsDesktop: 1200px;
$breakpointsDesktopWideMd: 1450px;
$breakpointsDesktopWide: 1600px;

$xlg: $breakpointsDesktopWide;
$lg: $breakpointsDesktopWideMd;
$md: $breakpointsDesktop;
$sm: $breakpointsTabletWide;
$xs: $breakpointsTabletSmall;
$xxs: $breakpointsPhoneWide;

$breakpoints: (
	"phone": $breakpointsPhone,
	"phone-wide": $breakpointsPhoneWide,
	"phablet": $breakpointsPhablet,
	"tablet-small": $breakpointsTabletSmall,
	"tablet": $breakpointsTablet,
	"tablet-wide": $breakpointsTabletWide,
	"desktop": $breakpointsDesktop,
	"desktop-wide-md": $breakpointsDesktopWideMd,
	"desktop-wide": $breakpointsDesktopWide,
);

// Цвета на сайте

$white: #fff;
$black: #000;
$red: #ea0000;
$text-color: #121212;
$text-dark: #282828;
$blue: #3e3be7;
$blue-hover: #3633b9;
$yellow: #ffb23e;
$yellow-hover: #df9b36;
$burger-color: #8c8c8c;
$border: #dbdbdb;
$bg-grey: #f8f8f8;
$grey: #a2a2a2;
$green: #2ea155;
$grey-light: #666666;
$date-color: #525252;
$orange: #ff7a55;

$logo-color: #201e23;

$mobileBrackpoints: "tablet";

$enable-grid-classes: true !default;

$grid-breakpoints: (
	xxxs: 0,
	xl: $xlg,
	lg: $lg,
	md: $md,
	sm: $sm,
	xs: $xs,
	xxs: $xxs,
) !default;

// Grids
$grid-columns: 12;
$grid-gutter-width: 32px;
$baseFontF: "Golos", "Manrope", sans-serif;
$baseFontF2: "Manrope", "Golos", sans-serif;
$headlineFontF: "Roboto-Slab", "Roboto", sans-serif;

$titleFF: $baseFontF;

$baseFS: 18px !default;
$baseLH: (25px / $baseFS);
$baseFW: 400;
$baseFSt: normal;
$baseFF: $baseFontF;
$baseFF2: $baseFontF2;
$baseFClr: $text-color;
$baseBg: $white;

$family: $baseFF;

$containerW: 1150px;
$containerP: 15px;

$baseLinkColor: inherit;
$baseLinkColorHover: inherit;

$big90: bold 90px $titleFF;
$big68: bold 68px $titleFF;
$fs-button-18: bold 18px $baseFF;

$fs-12: bold 12px/16px $family;
$fs-12-bold: bold 12px/16px $family;
$fs-12-bold-sm: bold 12px/16px $family;
$fs-14: 14px/20px $family;
$fs-14-link: $fs-14;
$fs-14-bold: bold 14px/20px $family;
$fs-16: 16px/24px $family;
$fs-16-link: $fs-16;
$fs-16-bold: bold 16px/24px $family;
$fs-18: 18px/26px $family;
$fs-18-bold: bold 18px/26px $family;
$fs-18-link: $fs-18;
$fs-card: 600 20px/1.3 $family;
$fs-news: $fs-card;
$fs-name: bold 22px/1.4 $family;

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;
	@each $key, $num in $map {
		@if $prev-num == null {
			// Do nothing
		} @else if not comparable($prev-num, $num) {
			@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		} @else if $prev-num < $num {
			@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}
		$prev-key: $key;
		$prev-num: $num;
	}
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map) {
	$values: map-values($map);
	$first-value: nth($values, 1);
	@if $first-value != 0 {
		@warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
	}
}

@include assert-starts-at-zero($grid-breakpoints);
